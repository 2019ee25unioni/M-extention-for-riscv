`timescale 1ns/1ns
module mul_try (input logic clk,start,branch_output,  input logic [31:0] a,B,output logic busy, done, output logic [63:0]out );
	logic [5:0] count;
	logic ok;
	logic [63:0] mul_reg, A_reg;
	logic [31:0] check;
	logic check_bit;
	
	assign check_bit = | check;

	// input a and B are the unsigned numbers to multiply
	// branch_output is the flag generated by the branch comparator by using a<b (unsigned)
	// check is the register that is used for the determination of when the calculation needs not to be calculated. i.e when multiplying 00011 by 0100 first put 00100 in check then right shift it (zero add). when the value of the register turns zero, the calculation terminates no further calculation is needed
	// check_bit is the checking of zeros in the check register
	// A_reg is register that is shifted then either, added to mul_reg if the value of input B is 1, or proceeds to the next bit of input B 
	always_ff @(negedge clk) begin 
	
	if ((count < 6'b100_000)& ok & check_bit) count <= count+1'b1; 	
	else if   (start) begin  count<='0; ok <=1'b1; out<='0; end 

	if (count == 6'b100_000 | ~check_bit) begin out <= mul_reg;ok<=1'b0; count ='0; end
	
	
	end
	assign done =~ok;
	assign busy = ok;

	always_comb begin 
	
	//if (busy ) check = check;
	//else if (start) begin if (a<B)check=B; else check=a; end  // use brach_comparator for the flags

	if (busy ) check = check;
	else if (start) begin if (branch_output)check=B; else check=a; end

	if (busy ) A_reg = A_reg;
	else if (start) A_reg=a;
	
	
	case (count)
	6'h00 : begin 
			if (B[0]) begin 
				mul_reg = A_reg;
					end
			else mul_reg = '0; 
		end
	6'd01 : begin if (B[1]) begin A_reg = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end
	6'd02 : begin if (B[2]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1;check = check >> 1; end 
	6'd03 : begin if (B[3]) begin A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  =  A_reg  << 1; check = check >> 1;end 
	6'd04 : begin if (B[4]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg;check = check >> 1; end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd05 : begin if (B[5]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd06 : begin if (B[6]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd07 : begin if (B[7]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd08 : begin if (B[8]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd09 : begin if (B[9]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd10 : begin if (B[10]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd11 : begin if (B[11]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd012 : begin if (B[12]) begin A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd013 : begin if (B[13]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd014 : begin if (B[14]) begin A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd015 : begin if (B[15]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg;check = check >> 1; end 
			else  A_reg  = A_reg << 1;check = check >> 1; end 
	6'd016 : begin if (B[16]) begin  A_reg = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd017 : begin if (B[17]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd018 : begin if (B[18]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg;check = check >> 1; end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd019 : begin if (B[19]) begin A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd020: begin if (B[20]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg;check = check >> 1; end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd021 : begin if (B[21]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd022 : begin if (B[22]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd023 : begin if (B[23]) begin  A_reg = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd024 : begin if (B[24]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd025 : begin if (B[25]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1;check = check >> 1; end 
	6'd026 : begin if (B[26]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg;check = check >> 1; end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd027 : begin if (B[27]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd028 : begin if (B[28]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg;check = check >> 1; end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd029 : begin if (B[29]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg;check = check >> 1; end 
			else  A_reg  = A_reg << 1;check = check >> 1;end 
	6'd030 : begin if (B[30]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	6'd031 : begin if (B[31]) begin  A_reg  = A_reg << 1; mul_reg = mul_reg + A_reg; check = check >> 1;end 
			else  A_reg  = A_reg << 1; check = check >> 1;end 
	




	endcase
	end




endmodule
